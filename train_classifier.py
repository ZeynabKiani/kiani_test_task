# -*- coding: utf-8 -*-
"""train_classifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13z1dJojjyPL1BoqQBYgB0Q6qKUzbBLup
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from imblearn.ensemble import BalancedBaggingClassifier
from imblearn.over_sampling import RandomOverSampler, SMOTE, ADASYN
from imblearn.under_sampling import RandomUnderSampler
from sklearn.metrics import classification_report
from sklearn.preprocessing import StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer

############load_data
train_df = pd.read_csv('task_train.csv')
test_df = pd.read_csv('task_test.csv')

# Drop unnecessary columns ########################
cols_to_drop = ['Label', 'Unnamed: 0.1', 'Unnamed: 0', 'ID', 'UserID', 'Origin', 'Destination', 'Comment']
X_train = train_df.drop(cols_to_drop, axis=1)
X_test = test_df.drop(cols_to_drop, axis=1)
y_train = train_df['Label']
y_test = test_df['Label']

#feature extraction from 'CreatedAt'##########################
X_train['Created_at'] = pd.to_datetime(X_train['Created_at'])
X_test['Created_at'] = pd.to_datetime(X_test['Created_at'])

X_train['Month'] = X_train['Created_at'].dt.month
X_train['Day'] = X_train['Created_at'].dt.day
X_train['Hour'] = X_train['Created_at'].dt.hour

X_test['Month'] = X_test['Created_at'].dt.month
X_test['Day'] = X_test['Created_at'].dt.day
X_test['Hour'] = X_test['Created_at'].dt.hour

X_train = X_train.drop('Created_at', axis=1)
X_test = X_test.drop('Created_at', axis=1)

#preprocessing pipeline ##################
numeric_features = ['Time', 'Income']

numeric_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='median')),
    ('scaler', StandardScaler())
])

preprocessor = ColumnTransformer(
    transformers=[
        ('num', numeric_transformer, numeric_features)
    ])

# base classifier  is denied for  BalancedBaggingClassifier #######################
base_classifier = RandomForestClassifier(random_state=42)

# define resampling various techniques ######################
sampling_techniques = {
    'Random Oversampling': RandomOverSampler(random_state=42),
    'SMOTE': SMOTE(random_state=42),
    'ADASYN': ADASYN(random_state=42),
    'Random Undersampling': RandomUnderSampler(random_state=42)
}

# Iterate over resampling techniques
for resampling_name, sampler in sampling_techniques.items():
    print(f"---- Training Balanced Bagging with {resampling_name} ----")

    # Define BalancedBaggingClassifier with current resampler
    balanced_bagging_classifier = BalancedBaggingClassifier(
        base_estimator=base_classifier,
        sampling_strategy='auto',  # Adjust if needed
        replacement=False,  # Whether to sample with or without replacement
        random_state=42
    )

    # Build pipeline with preprocessing and balanced bagging classifier
    pipeline = Pipeline([
        ('preprocessor', preprocessor),
        ('classifier', balanced_bagging_classifier)
    ])

    # Resample the training data
    X_resampled, y_resampled = sampler.fit_resample(X_train, y_train)

    # Train the classifier
    pipeline.fit(X_resampled, y_resampled)

    # Predict on the test set
    y_pred = pipeline.predict(X_test)

    # Evaluate the model
    print(f"Evaluation for {resampling_name}:")
    print(classification_report(y_test, y_pred))
    print("------------------------------------------")