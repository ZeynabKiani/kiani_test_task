# -*- coding: utf-8 -*-
"""feature_engineering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13z1dJojjyPL1BoqQBYgB0Q6qKUzbBLup
"""

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
############extract relevent feature from creat_at
def feature_engineering(df):

    df['Created_at'] = pd.to_datetime(df['Created_at'])
    df['Month'] = df['Created_at'].dt.month
    df['Day'] = df['Created_at'].dt.day
    df['Hour'] = df['Created_at'].dt.hour
    df = df.drop('Created_at', axis=1)

    return df

if __name__ == "__main__":

    train_df = pd.read_csv('task_train.csv')
    test_df = pd.read_csv('task_test.csv')

    # drop unnecessery colunm##########################
    cols_to_drop = ['Label', 'Unnamed: 0.1', 'Unnamed: 0', 'ID', 'UserID', 'Origin', 'Destination', 'Comment']
    X_train = train_df.drop(cols_to_drop, axis=1)
    X_test = test_df.drop(cols_to_drop, axis=1)

    # feature engineering on created_at column###################
    X_train = feature_engineering(X_train)
    X_test = feature_engineering(X_test)

    #numeric features ###############
    numeric_features = ['Time', 'Income']

    #pipeline for numeric #######################
    numeric_transformer = Pipeline(steps=[
        ('scaler', StandardScaler())
    ])

    preprocessor = ColumnTransformer(
        transformers=[
            ('num', numeric_transformer, numeric_features),
            ('passthrough', 'passthrough', ['Month', 'Day', 'Hour'])
        ])

    # transform the  data ###############
    X_train_processed = preprocessor.fit_transform(X_train)


    X_test_processed = preprocessor.transform(X_test)

